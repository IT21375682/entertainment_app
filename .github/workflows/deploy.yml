name: CI/CD to VM

on:
  push:
    branches: ["main"]

jobs:
  build-check:
    name: Build check (CI)
    runs-on: ubuntu-latest
    env:
      # enforce ignoring peer conflicts during CI until deps are fixed
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            FrontEnd/package-lock.json
            BackEnd/package-lock.json

      # Frontend CI build
      - name: Frontend install & build
        working-directory: FrontEnd
        run: |
          npm ci
          NODE_ENV=production npm run build

      # Backend quick install (optional test/build)
      - name: Backend install
        working-directory: BackEnd
        run: |
          npm ci

  deploy:
    name: Deploy to VM
    needs: build-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for version/commit info)
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add VM to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Remote deploy over SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
        run: |
          ssh -o StrictHostKeyChecking=yes -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'bash -s' <<'EOF'
          set -euo pipefail

          REPO_DIR=/www/wwwroot/trendstream.online/entertainment_app
          FRONTEND_DIR=$REPO_DIR/FrontEnd
          BACKEND_DIR=$REPO_DIR/BackEnd

          # ensure path exists
          mkdir -p "$REPO_DIR"

          # allow git in case ownership is mixed
          git config --global --add safe.directory "$REPO_DIR" || true

          # if repo exists update, else clone
          if [ -d "$REPO_DIR/.git" ]; then
            cd "$REPO_DIR"
            git fetch origin
            git reset --hard origin/main
            git clean -fdx
          else
            rm -rf "$REPO_DIR"
            git clone --branch main --depth 1 https://github.com/IT21375682/entertainment_app "$REPO_DIR"
            cd "$REPO_DIR"
          fi

          # FRONTEND build (tolerate peer conflicts)
          cd "$FRONTEND_DIR"
          export NPM_CONFIG_LEGACY_PEER_DEPS=true
          npm ci
          NODE_ENV=production npm run build

          # BACKEND deps (no peer issues expected)
          cd "$BACKEND_DIR"
          npm ci
          # npm run build   # uncomment if needed

          # restart PM2 apps without duplicating
          pm2 restart trendstream-frontend || pm2 start "npm run start -- -p 3000" --name trendstream-frontend --cwd "$FRONTEND_DIR"
          pm2 restart trendstream-backend  || pm2 start "npm run start"            --name trendstream-backend  --cwd "$BACKEND_DIR"
          pm2 save
          EOF
